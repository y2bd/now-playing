{"version":3,"sources":["secret.ts","index.tsx","App.tsx","components/Record.tsx","hooks/useLocalStorage.ts","services/lastfm.ts","services/dropbox.ts","registerServiceWorker.ts","hooks/useLocalPromise.ts","hooks/useToggle.ts"],"names":["exports","fileUri","lastFmToken","React","__webpack_require__","ReactDOM","App_1","registerServiceWorker_1","render","createElement","default","document","getElementById","Record_1","useLocalPromise_1","useToggle_1","dropbox_1","records","getRecords","best","setBest","great","setGreat","good","setGood","fair","setFair","filteredRecords","useMemo","map","album","artist","date","rating","Date","parse","show","groupedRecords","reduce","acc","elem","month","getMonth","monthName","toLocaleString","undefined","[object Object]","push","reverse","className","onClick","group","Object","keys","Fragment","filter","record","length","key","assign","lastfm_1","RecordComp","memo","albumArtUri","loading","error","encodeURIComponent","getAlbumArtUri","detail","setDetail","empty","emoji","10","8","6","4","src","defaultValue","hadRevivedValue","setHadRevivedValue","useState","storedSerializedValue","window","localStorage","getItem","storedValue","JSON","state","setState","useCallback","newValue","removeItem","toStore","stringify","setItem","_a","r","secret_1","eArtist","eAlbum","apiUrl","response","get","err","imgs","image","split","line","Number","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","URL","toString","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","useLocalStorage_1","promiseFn","inputs","value","setValue","setLoading","setError","useEffect","result","toggleState"],"mappings":"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","file":"static/js/main.52aa3d37.chunk.js","sourcesContent":["export const fileUri = `https://dl.dropbox.com/s/9n6j3bkmby1i8a3/album-of-the-day.csv`;\nexport const lastFmToken = `2705c81fa3f15e0ced0718eae02f1795`;","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\nregisterServiceWorker();\n","import * as React from \"react\";\nimport \"./App.css\";\nimport Record from './components/Record';\nimport useLocalPromise from './hooks/useLocalPromise';\nimport useToggle from './hooks/useToggle';\nimport { getRecords } from './services/dropbox';\n\nconst App = () => {\n  const [records] = useLocalPromise(\"records\", () => getRecords(), [], []);\n\n  const [best, setBest] = useToggle();\n  const [great, setGreat] = useToggle();\n  const [good, setGood] = useToggle();\n  const [fair, setFair] = useToggle();\n\n  const filteredRecords = React.useMemo(() => {\n    return records.map(({ album, artist, date, rating }) =>\n      ({\n        album, artist, date: new Date(Date.parse(date as any) + 1000 * 60 * 60 * 9), rating, show:\n          (!best && !great && !good && !fair) ||\n          (best && rating >= 8.1) ||\n          (great && rating >= 6.1 && rating < 8.1) ||\n          (good && rating >= 4.1 && rating < 6.1) ||\n          (fair && rating < 4.1)\n      }));\n  }, [best, great, good, fair, records]);\n\n  const groupedRecords = React.useMemo(() => {\n    return filteredRecords.reduce((acc, elem) => {\n      const month = elem.date.getMonth();\n      const monthName = elem.date.toLocaleString('en-us', { month: 'long' });\n      if (acc[month] === undefined) {\n        acc[month] = { [monthName]: [] };\n      }\n      acc[month][monthName].push(elem);\n      return acc;\n    }, [] as Array<{ [month: string]: typeof filteredRecords }>).reverse();\n  }, [filteredRecords]);\n\n  return <div className='App'>\n    <header>\n      <h1>albums of 2019</h1>\n      <span className={best && 'active' || ''} onClick={setBest}>üòç</span>\n      <span className={great && 'active' || ''} onClick={setGreat}>üòä</span>\n      <span className={good && 'active' || ''} onClick={setGood}>üôÇ</span>\n      <span className={fair && 'active' || ''} onClick={setFair}>üòê</span>\n    </header>\n    {groupedRecords.map(group => Object.keys(group).map(monthName => (\n      <>\n        <h2>{monthName} ({group[monthName].filter(record => record.show).length})</h2>\n        <div className='Records'>\n          {group[monthName].map(record =>\n          <div key={record.artist + record.album} className={record.show ? 'show' : 'hide'}>\n            <Record\n              {...record}\n            />\n          </div>)}\n        </div>\n      </>\n    )))}\n  </div>;\n};\n\nexport default App;\n","import * as React from 'react';\nimport useLocalPromise from 'src/hooks/useLocalPromise';\nimport useToggle from '../hooks/useToggle';\nimport { Record } from '../services/dropbox';\nimport { getAlbumArtUri } from '../services/lastfm';\nimport './Record.css';\n\nconst RecordCompB = (record: Record) => {\n    const { artist, album, rating } = record;\n\n    const [albumArtUri, loading, error] = useLocalPromise(\n        encodeURIComponent(`${artist}_${album}`),\n        () => getAlbumArtUri(record),\n        undefined,\n        [artist, album]\n    );\n\n    const [detail, setDetail] = useToggle();\n\n    const empty = !loading && !albumArtUri;\n\n    const emoji: string = {\n        10: 'üòç',\n        8: 'üòä',\n        6: 'üôÇ',\n        4: 'üòê'\n    }[rating] || 'üôÇ';\n\n    return <div\n        className={'Record' + (empty ? ' empty' : '')}\n        onClick={setDetail}>\n        {albumArtUri && <img src={albumArtUri} />}\n        {(loading && !albumArtUri) && <div className=\"Details\">\n            <h1>loading</h1>\n            <h2>album art</h2>\n        </div>}\n        {(detail || empty || error) && <div className=\"Details\">\n            <h1>{artist}</h1>\n            <h2>{album}</h2>\n            <span className=\"emoji\">{emoji}</span>\n        </div>}\n    </div>;\n};\n\nconst RecordComp = React.memo(RecordCompB);\nexport default RecordComp;","import * as React from 'react';\n\nconst useLocalStorageState = <T>(key: string, defaultValue: T): [\n    T,\n    (newValue: T) => void\n] => {\n    const [hadRevivedValue, setHadRevivedValue] = React.useState<boolean>(false);\n\n    if (!hadRevivedValue) {\n        try {\n            const storedSerializedValue = window.localStorage.getItem(key);\n            const storedValue: T | null = \n                storedSerializedValue && JSON.parse(storedSerializedValue);\n\n            if (storedValue !== null) {\n                defaultValue = storedValue as NonNullable<T>;\n            }\n        } finally {\n            setHadRevivedValue(true);\n        }\n    }\n\n    const [state, setState] = React.useState<T>(defaultValue);\n    const setStorageState = React.useCallback((newValue: NonNullable<T>) => {\n        setState(newValue);\n\n        try {\n            // tslint:disable-next-line:triple-equals\n            if (newValue == undefined) {\n                window.localStorage.removeItem(key);\n            } else {\n                const toStore = JSON.stringify(newValue);\n                window.localStorage.setItem(key, toStore);\n            }\n        } catch {\n            return;\n        }\n    }, [key, setState]);\n\n    return [\n        state,\n        setStorageState\n    ]\n};\n\nexport default useLocalStorageState;","import * as r from \"request-promise-native\";\nimport { lastFmToken } from '../secret';\nimport { Record } from './dropbox';\n\nexport async function getAlbumArtUri({ artist, album }: Record): Promise<string | undefined> {\n    const eArtist = encodeURIComponent(artist);\n    const eAlbum = encodeURIComponent(album);\n    const apiUrl = `http://ws.audioscrobbler.com/2.0/?method=album.getinfo` +\n        `&api_key=${lastFmToken}&artist=${eArtist}&album=${eAlbum}&autocorrect=1&format=json`;\n\n    let response: any;\n    try {\n        response = JSON.parse(await r.get(apiUrl));\n    } catch (err) {\n        return undefined;\n    }\n\n    if (response.error) {\n        return undefined;\n    } else {\n        const imgs = response.album.image;\n        const bestImage = imgs[imgs.length - 1]['#text'];\n        return bestImage || undefined;\n    }\n}","import * as r from \"request-promise-native\";\nimport { fileUri } from '../secret';\n\nexport interface Record {\n    readonly date: Date;\n    readonly artist: string;\n    readonly album: string;\n    readonly rating: number;\n}\n\nexport async function getRecords(): Promise<Record[]> {\n    const response: string = await r.get(fileUri);\n    return response\n        .split('\\n')\n        .map(line => line.split(','))\n        .map(([date, artist, album, rating]) => ({\n            album,\n            artist,\n            date: new Date(Date.parse(date)),\n            rating: Number(rating),\n        }));\n}","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport useLocalStorageState from './useLocalStorage';\n\nexport default function useLocalPromise<T>(\n    key: string,\n    promiseFn: () => Promise<T>,\n    defaultValue: T,\n    inputs?: ReadonlyArray<T>\n): [T, boolean, Error | undefined] {\n    const [value, setValue] = useLocalStorageState(key, defaultValue);\n    const [loading, setLoading] = React.useState<boolean>(false);\n    const [error, setError] = React.useState<Error | undefined>(undefined);\n\n    React.useEffect(() => {\n        setLoading(true);\n        promiseFn().then(result => {\n            setLoading(false);\n            setValue(result);\n        }).catch(err => {\n            setLoading(false);\n            setError(err);\n        });\n    }, inputs);\n\n    return [value, loading, error];\n}","import * as React from 'react';\n\nexport default function useToggle(defaultValue?: boolean): [boolean, () => void] {\n    const [state, setState] = React.useState(!!defaultValue);\n\n    const toggleState = React.useCallback(() => {\n        setState(!state);\n    }, [state, setState]);\n\n    return [state, toggleState];\n}"],"sourceRoot":""}