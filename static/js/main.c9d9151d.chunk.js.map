{"version":3,"sources":["secret.ts","index.tsx","App.tsx","components/Record.tsx","services/lastfm.ts","services/dropbox.ts","registerServiceWorker.ts","hooks/usePromise.ts","hooks/useToggle.ts"],"names":["exports","fileUri","lastFmToken","React","__webpack_require__","ReactDOM","App_1","registerServiceWorker_1","render","createElement","default","document","getElementById","Record_1","usePromise_1","useToggle_1","dropbox_1","records","loading","getRecords","best","setBest","great","setGreat","good","setGood","fair","setFair","filteredRecords","useMemo","map","album","artist","date","rating","show","className","onClick","record","key","Object","assign","lastfm_1","RecordComp","memo","albumArtUri","getAlbumArtUri","undefined","detail","setDetail","empty","emoji","10","8","6","4","src","r","secret_1","eArtist","encodeURIComponent","eAlbum","apiUrl","response","JSON","parse","get","err","error","imgs","image","length","split","line","Date","Number","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","URL","toString","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","promiseFn","defaultValue","inputs","setLoading","useState","value","setValue","useEffect","result","setState","toggleState","useCallback"],"mappings":"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","file":"static/js/main.c9d9151d.chunk.js","sourcesContent":["export const fileUri = `https://dl.dropbox.com/s/9n6j3bkmby1i8a3/album-of-the-day.csv`;\nexport const lastFmToken = `2705c81fa3f15e0ced0718eae02f1795`;","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\nregisterServiceWorker();\n","import * as React from \"react\";\nimport \"./App.css\";\nimport Record from './components/Record';\nimport usePromise from './hooks/usePromise';\nimport useToggle from './hooks/useToggle';\nimport { getRecords } from './services/dropbox';\n\nconst App = () => {\n  const [records, loading] = usePromise(() => getRecords(), [], []);\n\n  const [best, setBest] = useToggle();\n  const [great, setGreat] = useToggle();\n  const [good, setGood] = useToggle();\n  const [fair, setFair] = useToggle();\n\n  const filteredRecords = React.useMemo(() => {\n    return records.map(({ album, artist, date, rating }) =>\n      ({\n        album, artist, date, rating, show:\n          (!best && !great && !good && !fair) ||\n          (best && rating >= 8.1) ||\n          (great && rating >= 6.1 && rating < 8.1) ||\n          (good && rating >= 4.1 && rating < 6.1) ||\n          (fair && rating < 4.1)\n      }));\n  }, [best, great, good, fair, records]);\n\n  if (loading) {\n    return <p>loading...</p>;\n  } else {\n    return <div className='App'>\n      <header>\n        <h1>albums of 2019</h1>\n        <span className={best && 'active' || ''} onClick={setBest}>üòç</span>\n        <span className={great && 'active' || ''} onClick={setGreat}>üòä</span>\n        <span className={good && 'active' || ''} onClick={setGood}>üôÇ</span>\n        <span className={fair && 'active' || ''} onClick={setFair}>üòê</span>\n      </header>\n      <div className='Records'>\n        {filteredRecords.map(record =>\n          <div key={record.artist + record.album} className={record.show ? 'show' : 'hide'}>\n            <Record\n              {...record}\n            />\n          </div>)}\n      </div>\n    </div>;\n  }\n};\n\nexport default App;\n","import * as React from 'react';\nimport usePromise from '../hooks/usePromise';\nimport useToggle from '../hooks/useToggle';\nimport { Record } from '../services/dropbox';\nimport { getAlbumArtUri } from '../services/lastfm';\nimport './Record.css';\n\nconst RecordCompB = (record: Record) => {\n    const { artist, album, rating } = record;\n    const [albumArtUri, loading] = usePromise(\n        () => getAlbumArtUri(record),\n        undefined,\n        [artist, album]\n    );\n\n    const [detail, setDetail] = useToggle();\n\n    const empty = !loading && !albumArtUri;\n\n    const emoji: string = {\n        10: 'üòç',\n        8: 'üòä',\n        6: 'üôÇ',\n        4: 'üòê'\n    }[rating] || 'üôÇ';\n\n    return <div\n        className={'Record' + (empty ? ' empty' : '')}\n        onClick={setDetail}>\n        {albumArtUri && <img src={albumArtUri} />}\n        {loading && <div className=\"Details\">\n            <h1>loading</h1>\n            <h2>album art</h2>\n        </div>}\n        {(detail || empty) && <div className=\"Details\">\n            <h1>{artist}</h1>\n            <h2>{album}</h2>\n            <span className=\"emoji\">{emoji}</span>\n        </div>}\n    </div>;\n};\n\nconst RecordComp = React.memo(RecordCompB);\nexport default RecordComp;","import * as r from \"request-promise-native\";\nimport { lastFmToken } from '../secret';\nimport { Record } from './dropbox';\n\nexport async function getAlbumArtUri({ artist, album }: Record): Promise<string | undefined> {\n    const eArtist = encodeURIComponent(artist);\n    const eAlbum = encodeURIComponent(album);\n    const apiUrl = `http://ws.audioscrobbler.com/2.0/?method=album.getinfo` +\n        `&api_key=${lastFmToken}&artist=${eArtist}&album=${eAlbum}&autocorrect=1&format=json`;\n\n    let response: any;\n    try {\n        response = JSON.parse(await r.get(apiUrl));\n    } catch (err) {\n        return undefined;\n    }\n\n    if (response.error) {\n        return undefined;\n    } else {\n        const imgs = response.album.image;\n        const bestImage = imgs[imgs.length - 1]['#text'];\n        return bestImage || undefined;\n    }\n}","import * as r from \"request-promise-native\";\nimport { fileUri } from '../secret';\n\nexport interface Record {\n    readonly date: Date;\n    readonly artist: string;\n    readonly album: string;\n    readonly rating: number;\n}\n\nexport async function getRecords(): Promise<Record[]> {\n    const response: string = await r.get(fileUri);\n    return response\n        .split('\\n')\n        .map(line => line.split(','))\n        .map(([date, artist, album, rating]) => ({\n            album,\n            artist,\n            date: new Date(Date.parse(date)),\n            rating: Number(rating),\n        }));\n}","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\n\nexport default function usePromise<T>(\n    promiseFn: () => Promise<T>, \n    defaultValue: T, \n    inputs?: ReadonlyArray<any>\n): [T, boolean] {\n    const [loading, setLoading] = React.useState<boolean>(false);\n    const [value, setValue] = React.useState<T>(defaultValue);\n\n    React.useEffect(() => {\n        setLoading(true);\n        promiseFn().then(result => {\n            setLoading(false);\n            setValue(result);\n        }, () => setLoading(false));\n    }, inputs);\n\n    return [value, loading];\n}","import * as React from 'react';\n\nexport default function useToggle(defaultValue?: boolean): [boolean, () => void] {\n    const [state, setState] = React.useState(!!defaultValue);\n\n    const toggleState = React.useCallback(() => {\n        setState(!state);\n    }, [state, setState]);\n\n    return [state, toggleState];\n}"],"sourceRoot":""}